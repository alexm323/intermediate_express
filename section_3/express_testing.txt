___________________________________________
Good Testing Practices
___________________________________________

New tools and best Practices

Visit some essential concepts with Testing

mocking understanding what that is 

examine end to end tests with cypress 

good testing Practices
1. Make sure you write tests
2. Don't get too attached to coverage percentages(test all of the important stuff and change tests as the application changes)
3. Make sure in your readme you specify how to run the tests!(Make sure you have a readme in the first place)
- in your package.json, there is a key that we can add called scripts, and we can add our custom scripts that run in npm, so we could add test and then we could just use 'npm run test' if we added that word test.
-we could also write our own commands in the scripts we could say npm run lol and have that start our server or something 
-idea being that we want to make it easy for someone to be able to run the tests. 

___________________________________________
Test APIs not Databases
___________________________________________
Instead of teting the database, test your api 

A better way to test would be something like if you are going to be creating a cat with something like 

POST /cats have it return {cat:cat_details}

then you would write the regular tests for that to make sure it was created and youre getting a response

and THEN you would make another request to another api route to GET /cats 
to see if it returns the correct cat object

test your api when you can not your database. 

___________________________________________
Test Driven Development
___________________________________________

TDD is an approach that some teams take when developing an application 

its a practice, when you are creating an app and writing tests 

Write tests first - they will fail , this makes you think about how the application works 

only write the code necessary to get the tests to pass (bare minimum)

As you write more code, keep running tests and make sure they keep running 

Red,Green, Refactor 

Your tests fail (red)
You write the code to get the tests to pass (green)
You refactor! 

it is a very specific approach to creating an app and working on projects. 

not everyone is going to practice at tdd 

how should this feature work 
how should this one function work 


add a test , run the test , make a little change, run the tests , when it passes continue. 

write tests first, making them fail 

it really helps you understand and think about your code before you jump 

by keeping things testable it makes it easier to keep things refactorable and easier to maintain. 

it slows development down upfront, but it saves you time in the longrun because you might keep bugs from happening. 

time is a bit of a tradeoff. it depends on how well you write good tests 
it takes a while to really get the idea. 
takes a while to get the testing going. 

when you work on a project on your own it could slow you down but it will save time
in the industry you might have to do it anyways 

write tests first
make them pass with the minimum amount of code possible 

___________________________________________
Mocks
___________________________________________
Common testing concept called mocking 

core idea is pretty standard 

-Mocking is primarily used in unit testing
- An object under test may have dependencies on other objects 
-to isolate the behavior ou repolace other objects by mocks that simulate their behavior


so we make a fake function or dummy function to try to get the same functionality that we are expecting back 

advantages, 

it can be faster 
we could make a mock for something like pokemon so we dont have to make a request everytime we run our test
we dont have to wait for api resposnes or deal with rate limits 

it makes your tets pure, whether they pass or fail depends on on your code not on some external thing . 

our application will still run on it but still 

challenges
-can be convoluted to setup
-can be over optimizing 


can check the docs for mocks in jest 

the core method that we will rely on is

jest.fn 

this lets us write a function and then jest adds in some methods 

it can tell us all kinds of things like how many times was a function called 
we will be testing a function called rollDice(numSides

)

something like dice can be hard to simulate because it is random so mocks can help us with this 
